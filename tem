#!/usr/bin/python

import base64
import urllib
import httplib
import json
import os
from urlparse import urlparse

tenantId = "d5eaa0eec79e45728b4c2720ba6489d2"
tenantId = ""

usehttps = False
#url = "localhost:5000"
url = "fg2:5000"
osuser = "admin"
ospassword = "password"

tokenId = ""

#print ENV['OS_USERNAME']

print "Host URL: " + url

### --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--
###
###  insert the 'Get OpenStack Credentials' snippet here
###
### --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--
def login():
	params = '{"auth":{"passwordCredentials":{"username": "' + osuser + '", "password":"' + ospassword + '"}}}'
	params = '{"auth":{"tenantName":"admin", "passwordCredentials":{"username": "' + osuser + '", "password":"' + ospassword + '"}}}'
	headers = {"Content-Type": "application/json"}

	if (usehttps == True):
	    conn = httplib.HTTPSConnection(url, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')
	else:
	    conn = httplib.HTTPConnection(url)

#	print params
#	print headers

	conn.request("POST", "/v2.0/tokens", params, headers)
	response = conn.getresponse()
	data = response.read()
	session = json.loads(data)

	conn.close()

	return session

session = login()
#print json.dumps(session, indent=4)

access = session['access']
userId = access['user']['id']
tokenId = access['token']['id']
tenantId = access['token']['tenant']['id']

serviceCatalog = access['serviceCatalog']
nova = serviceCatalog[0]
publicURL = nova['endpoints'][0]['publicURL']

print "Your tenantId is: %s" % tenantId
print "Your token is: %s" % tokenId
print "Your Nova URL is: %s" % publicURL

#curl -v -H "X-Auth-Token:aaba123ae4df4e1da83681d42553907a" http://localhost:8774/v2/4ed43001453a478eadbe101353fd175c/servers

###
### Get the list of servers
###

# HTTP connection #2
apitoken = tokenId
url2 = urlparse(publicURL).netloc
apiurlt = {}
apiurlt[2] = urlparse(publicURL).path

print "Public URL is \"" + url2 + "\""
print "Path is \"" + apiurlt[2] + "\""

params2 = urllib.urlencode({})
headers2 = { "X-Auth-Token":apitoken, "Content-type":"application/json" }

if (usehttps == True):
    conn2 = httplib.HTTPSConnection(url2, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')
else:
    conn2 = httplib.HTTPConnection(url2)

conn2.request("GET", "%s/servers" % apiurlt[2], params2, headers2)

# HTTP response #2

response2 = conn2.getresponse()
data2 = response2.read()
session2 = json.loads(data2)
                           
conn2.close()

#print session2
#print json.dumps(session2, indent=4)

print
servers = session2['servers']
print str(len(servers)) + " servers"

###
### Get the status of servers
###
def getServerDetail(server):
	publicURL = server['links'][0]['href']
	# HTTP connection
	url = urlparse(publicURL).netloc
	apiurlt = {}
	apiurlt[2] = urlparse(publicURL).path

#	print "Server URL is \"" + url + "\""
	#print "Path is \"" + apiurlt[2] + "\""
#	print "Your token is: %s" % apitoken

	params = urllib.urlencode({})
	headers = { "X-Auth-Token":apitoken, "Content-type":"application/json" }

	if (usehttps == True):
	    conn = httplib.HTTPSConnection(url, key_file='../cert/priv.pem', cert_file='../cert/srv_test.crt')
	else:
	    conn = httplib.HTTPConnection(url)

	#conn2.request("GET", "%s/servers" % apiurlt[2], params2, headers2)
	conn.request("GET", "%s" % apiurlt[2], params, headers)

	# HTTP response 

	response = conn.getresponse()
	data = response.read()
	session = json.loads(data)
                           
	conn.close()

	#print json.dumps(session, indent=4)
	return session['server']

''' VM class '''
class Component: pass

# inherited from Component class
class VM (Component):
        def __init__(self, name):
                self.name = name
                self.F = "OK"
                self.S = "OK"
                self.M = "OK"

        def getStateF(self):
                return self.F

        def updateStateF(self):
                # connect to API server
                #subprocess.call(logincmd + " nova flavor-list", shell=True)
                #subprocess.call(" nova list")
                cmd = " nova list | sed '1,3d' | awk '{print $4,$6,$8}'"
                subprocess.call(cmd, shell=True)
                #subprocess.call(" nova list", shell=True)
                self.F = "OK"
                self.F = "Error"

vms = []

for server in servers:
#	href = server['links'][0]['href']
	#print json.dumps(server, indent=4)
	vmname = server['name']
	print vmname
	detail = getServerDetail(server)
	#print json.dumps(detail, indent=4)
	statusS = detail['status']
	#print status
	vm = VM(vmname)
	vm.S = statusS
	vms.append(vm)
	
#	print json.dumps(detail, indent=4)

	if statusS == "ACTIVE":
		powerstate = detail['OS-EXT-STS:power_state']
		if powerstate == 1:
			powerstate = "running"
		vm.S += "(" + powerstate + ")"
	elif statusS == "SHUTOFF":
		powerstate = detail['OS-EXT-STS:power_state']
		if powerstate == 4:
			powerstate = "shutdown"
		vm.S += "(" + powerstate + ")"
	else:
#		print "something wrong"
		fault = detail['fault']
#		print json.dumps(fault, indent=4)

		#vm.S += "(" + str(fault['code']) + "): " + fault['message'] + " " + fault['details']
		vm.S += "(" + str(fault['code']) + "): " + fault['message'] 
		#print str(vm.S)
		
		# can handle the fault?
		# if the fault is in the fault recovery table (FRT) take the action
		# error_code or error_message | recovery action
		# else request translation to the CP-CFH (address required)
	print 	

print "can handle the fault? status = Error/Requested/Recovered"
print "+-------------------------------------------------------------------+"
#print "| Component | F         | S         | M     |"
print '| {0:10} | {1:7} | {2:30} | {3:5} |'.format('Component', 'F (CPU)', 'S (availability/ping) can handle?', 'M (ping/mgmt/API)')
print "+-------------------------------------------------------------------+"
for vm in vms:
	#print "| " + vm.name  + " | " + vm.F + " | " + vm.S + " | " + vm.M + " |"
	print '| {0:10} | {1:7} | {2:30} | {3:5} |'.format(vm.name, vm.F, vm.S, vm.M)
print "+-------------------------------------------------------------------+"

#print "| " + vm1 + " | " + vms[0].getStateF() + " | OK        | error |"
#print "| " + vm1 + " | " + vm1_stateF + " | OK        | error |"
#print "| " + vm2 + " | requested | OK        | OK    |"
#print "| " + vm3 + " | OK        | recovered | OK    |"
