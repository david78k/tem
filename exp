#!/bin/bash
# main channel for workload
# management channel (eth1)
mgmt=c11node27
# out of band channel (control channel)
# for faultload channel (eth0)
server=c11node27-eth0
if=cloudbr0

# workload channel
master=10.244.34.120 
slave1=10.244.34.112
slave2=10.244.34.116
slave3=10.244.34.118

tem_client="/root/tem/tem-client"
anarchyape="/root/anarchyape"

# start tem client if not already started
#$tem_client start

# start measuring uptime

# start mapreduce jobs in thread or background
#ssh master hadoop examples.jar wordcount input output &
ssh master /root/hadoop/wordcount &
#ssh master /root/terasort &
#ssh master /root/grep &

################################################
# start faultload thread
# when to inject faults? injection points
# probability: MTTB, erlang, exponential
################################################

# eth1 down to simulate either node crash or nic crash
#ssh $server ifconfig $if down

# mamangement server down
#ssh $server service cloud-management stop
# mamangement server start
#ssh $server service cloud-management start

# block 8080 port
ssh $server iptables -A INPUT -p tcp --dport 8080 -j DROP
sleep 3
# unblock 8080 port
ssh $server iptables -D INPUT -p tcp --dport 8080 -j DROP

# packet drop
#ssh $server tc ...

# packet delay
#ssh $server tc qdisc add dev eth0 root netem delay 100.0ms && sleep 30.0 && tc qdisc del dev eth0 root netem

# corrupt hdfs blocks
#java -jar $anarchyape/ape.jar ...

# disk I/O blocking by dd?

# API errors
 

# memory, cpu errors
# memory bit flops, memory hog
# cpu register errors, cpu hog
 
################################################
# user operations: select operations in a pool during the job (e.g., MapReduce) in progress
# {list, create, rename, resize, take snapshot, change flavor, attach/detach volume, attach/detach nic}
# user will have api errors.
################################################ 

# list VMs
cloudmonkey list virtualmachines filter=displayname,name,instancename,state,haenable,cpunumber,cpuspeed,cpuused,memory,serviceofferingname

# create a VM due to performance degradataion (autoscaling?)
# user may want more VMs to maintain a certain level of job performance or resource utilization. 
# e.g., up to CPU 85%, memory 90%, disk 90%
# if the utilization is over the threshold, user creates more VMs or attach more volumes.
# for this to work, user needs a monitoring system provided either by the provider or by itself.
# in this case, the monitoring system can fail to monitor if mgmt/api layer crashes.
#cloudmonkey deploy virtualmachine templateid=13ccff62-132b-4caf-b456-e8ef20cbff0e zoneid=e1bfdfaf-3d9b-43d4-9aea-2c9f173a1ae7 serviceofferingid=ef2537ad-c70f-11e1-821b-0800277e749c

# attach a volumne

# take snapshot

wait
